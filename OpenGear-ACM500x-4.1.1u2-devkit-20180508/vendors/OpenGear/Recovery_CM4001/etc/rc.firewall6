#!/bin/sh

source /etc/scripts/mutex

export IPTABLES=/bin/ip6tables

# Chain names
export WAN_IN="WanInput"
export LAN_IN="LanInput"
export LBK_IN="LoopInput"

export BLOCK="Block"
export SERVICES="Services"
export SERIAL="Serial"
export UPS="Ups"

# Script paths
CUSTOMFILE=/etc/config/filter6-custom
SERVICESFILE=/etc/config/filter6-services
SERIALFILE=/etc/config/filter6-serial
UPSFILE=/etc/config/filter6-ups

INITIALIZED="/var/run/.$(basename $0)_initialized"

# If IPv6 is disabled, drop everything
ipv6_enabled=$(config -g config.system.ipv6.enabled | cut -f2- -d' ')
if [ -z "$ipv6_enabled" ]; then

	if [ -f "$INITIALIZED" ]; then
		${IPTABLES} -F
		${IPTABLES} -X
		rm -f "$INITIALIZED"
	fi

	# Default policies for built in chains
	for CHAIN in FORWARD INPUT OUTPUT; do
		${IPTABLES} --policy ${CHAIN} DROP
	done

	${IPTABLES} -A INPUT --in-interface lo -j ACCEPT
	${IPTABLES} -A OUTPUT --out-interface lo -j ACCEPT

	exit 0
fi

# Create a Block rule for use by other chains
${IPTABLES} -n -L ${BLOCK} >& /dev/null
if [ $? != 0 ]; then
	${IPTABLES} -N ${BLOCK}
	# Don't log multicast packets
	${IPTABLES} -A ${BLOCK} ! --destination ff00::/8 -j LOG --log-prefix "ip6tables: ${BLOCK}: " --match limit
	${IPTABLES} -A ${BLOCK} --protocol tcp -j REJECT --reject-with tcp-reset
	${IPTABLES} -A ${BLOCK} --protocol udp -j REJECT --reject-with icmp6-port-unreachable
	${IPTABLES} -A ${BLOCK} -j DROP
fi

# Loopback rules
${IPTABLES} -n -L ${LBK_IN} >& /dev/null
if [ $? != 0 ]; then
	${IPTABLES} -N ${LBK_IN}
	${IPTABLES} -A ${LBK_IN} -j ACCEPT
fi

# WAN rules
${IPTABLES} -n -L ${WAN_IN} >& /dev/null
if [ $? != 0 ]; then
	${IPTABLES} -N ${WAN_IN}
	${IPTABLES} -A ${WAN_IN} --protocol icmpv6 --icmpv6-type router-advertisement -j ACCEPT
	${IPTABLES} -A ${WAN_IN} --protocol icmpv6 --icmpv6-type neighbour-solicitation -j ACCEPT
	${IPTABLES} -A ${WAN_IN} --protocol icmpv6 --icmpv6-type neighbour-advertisement -j ACCEPT
fi

# LAN rules (The same as WAN for all intents)
${IPTABLES} -n -L ${LAN_IN} >& /dev/null
if [ $? != 0 ]; then
	${IPTABLES} -N ${LAN_IN}
	${IPTABLES} -A ${LAN_IN} -j ${WAN_IN}
fi

# Rules for built in chains
if [ ! -f "$INITIALIZED" ]; then

	for CHAIN in FORWARD INPUT OUTPUT; do
		${IPTABLES} -F ${CHAIN}
	done

	# Default policies for built in chains
	${IPTABLES} --policy FORWARD DROP
	${IPTABLES} --policy INPUT DROP
	${IPTABLES} --policy OUTPUT ACCEPT

	${IPTABLES} -A OUTPUT --out-interface lo -j ACCEPT

	if [ ! -z "${WAN_INTERFACE}" ]; then
		${IPTABLES} -A INPUT --in-interface ${WAN_INTERFACE} -j ${WAN_IN}
	fi
	${IPTABLES} -A INPUT --in-interface lo -j ${LBK_IN}
	${IPTABLES} -A INPUT --in-interface br0+ -j ${LAN_IN}
	${IPTABLES} -A INPUT --in-interface eth0+ -j ${LAN_IN}
	${IPTABLES} -A INPUT --in-interface wlan0+ -j ${LAN_IN}
	${IPTABLES} -A INPUT --in-interface ppp+ -j ${LAN_IN}

	# Block any packets not explicitly allowed in
	${IPTABLES} -A FORWARD -j ${BLOCK}
	${IPTABLES} -A INPUT -j ${BLOCK}

	touch "$INITIALIZED"
fi

# Explicitly allow configured system services.
if [ -f ${SERVICESFILE} ]; then
	${IPTABLES} -n -L ${SERVICES} >& /dev/null
	if [ $? != 0 ]; then
    		#${IPTABLES} -N ${SERVICES}
    		. ${SERVICESFILE}
    		#${IPTABLES} -A ${WAN_IN} -j ${SERVICES}
	fi
fi

# Explicitly allow access to serial port services.
if [ -f ${SERIALFILE} ]; then
	${IPTABLES} -n -L ${SERIAL} >& /dev/null
	if [ $? != 0 ]; then
    		#${IPTABLES} -N ${SERIAL}
    		. ${SERIALFILE}
    		#${IPTABLES} -A ${WAN_IN} -j ${SERIAL}
	fi
fi

# Explicitly allow access to upsd daemon.
if [ -f ${UPSFILE} ]; then
	${IPTABLES} -n -L ${UPS} >& /dev/null
	if [ $? != 0 ]; then
    		#${IPTABLES} -N ${UPS}
    		. ${UPSFILE}
    		#${IPTABLES} -A ${WAN_IN} -j ${UPS}
	fi
fi
