#!/bin/bash

# If there's a user-configured script, run it instead
scripts[0]="/etc/config/scripts/$(basename $0)"
for (( i=0 ; i < ${#scripts[@]} ; i++ )); do
	if [ -f "${scripts[$i]}" ]; then
		exec /bin/bash "${scripts[$i]}" "$@"
	fi
done

log() {
	logger -s -t "$PROG_NAME" $1
}

recover() {
	log "$* - rebooting to recover cell modem..."
	sleep 3
	reboot
}

export PROG_NAME="$(basename $0)"

log "Modem watchdog starting"

name=$1
[ -z "$name" ] && exit 1

probe=$(config -g config.${name}.watchdog.probe | head -n 1 | cut -f2 -d' ')
threshold=$(config -g config.${name}.watchdog.threshold | head -n 1 | cut -f2 -d' ')
period=$(config -g config.${name}.watchdog.period | head -n 1 | cut -f2 -d' ')
count=$(config -g config.${name}.watchdog.count | cut -f2 -d' ')

if [ -z "$probe" -o -z "$threshold" ]; then
	log "Modem watchdog incorrectly configured"
	exit
fi

#sleep 'some' amount of time to let the device come up
sleep 60

[ -z "$count" ] && count=5
[ -z "$period" ] && period=30

failurecount=0
respondcount=0
connectcount=0
connectedonce=0
while :; do

	# log "checking cellmodem is enabled..."
	if [ "$(config -g config.${name}.ppp.dialer.enabled | cut -f2 -d' ')" != "on" ]; then
		log "cellmodem is not enabled"
		sleep $period
		continue
	fi
	# log "cellmodem is enabled!"

	# log "checking cellmodem is responding to commands..."
	if [ "$(infod_client -o get -q -p config.${name}.cellctl.status.device-state)" != "RESPONDING" ]; then
		respondcount=`expr $respondcount + 1`
		if [ "$respondcount" -ge "3" ]; then
			recover "Modem is not responding after $respondcount checks"
		fi
		sleep $period
		continue
	fi
	# log "cellmodem is responding to commands!"
	respondcount=0

	# log "checking modem is not under AR control..."
	if [ "$(config -g config.${name}.managed_ar | cut -f2 -d' ')" == "on" ]; then
		if [ "$(infod_client -o get -q -p config.${name}.ar_ctl)" != "up" ]; then
			# log "modem is under AR control, and not active, disregarding..."
			sleep $period
			continue
		# else
		#	log "modem is under AR control, and is active, continuing check..."
		fi
	fi
	# log "modem is not under AR control!"

	declare -a interfaces=("wan" "wlan")
	failover=0
	for i in "${interfaces[@]}"; do

		if [ "$(config -g config.interfaces.${i}.disabled | cut -f2 -d' ')" == "on" ]; then
			# log "interface ${i} is disabled, disregarding..."
			continue
		fi

		# log "checking cellmodem is not being used for ${i} failover..."
		if [ "$(config -g config.interfaces.${i}.failover.interface | cut -f2 -d' ')" == "${name}" ]; then
			# log "cellmodem is being used for ${i} failover, disregard watchdog probe"
			failover=1
			break
		fi
		# log "cellmodem is not being used for ${i} failover!"
	done
	if [ "$failover" == "1" ]; then
		# log "checking if failed over to cellmodem and it is up..."
		if [ "$(infod_client -o get -q -p conman.dial-${name}-up.status)" != "up" ]; then
			# log "cellmodem is being used for failover but is not currently up, disregarding"
			sleep $period
			continue
		fi
		# log "failed over to cellmodem and it is up!"
	fi

	# log "checking cellmodem is connected..."
	if [ "$(infod_client -o get -q -p config.${name}.cellctl.status.session-state)" != "CONNECTED" ]; then
		connectcount=`expr $connectcount + 1`
		log "cellmodem is still not connected, after $connectcount checks"
		if [ $connectcount -gt 20 ]; then
			# If connection came up successfully at least once, then it has dropped and been down for
			# longer than the threshold, so reboot
			if [ $connectedonce -eq 1 ]; then
				recover "Modem watchdog threshold of 10 minutes exceeded"
				connectcount=0
			fi
		fi
		sleep 30
		continue
	else
		connectedonce=1
	fi
	# log "cellmodem is connected!"
	connectcount=0

	ifuperror=0
	pingerror=0
	if [ -e /var/run/ppp-$name.pid ]; then
		ifname=$(tail -1 /var/run/ppp-$name.pid)
	elif [ -e /var/run/wwan-$name.pid ]; then
		ifname=wwan0
	else
		unset ifname
	fi
	if [ -z "$ifname" ]; then
		ifuperror=1
	fi

	if [ ! -z "$ifname" ]; then
		ping -W 30 -c $count -I $ifname $probe &> /dev/null
		pingerror=$?
	fi

	if [ $pingerror -ne 0 -o $ifuperror -ne 0 ]; then
		failurecount=`expr $failurecount + 1`
		log "Modem watchdog ping to $probe failed $failurecount times"
		if [ $failurecount -gt $threshold ]; then
			recover "Modem watchdog threshold of $threshold exceeded"
			failurecount=0
		fi
	else
		if [ $failurecount -gt 0 ]; then
			log "Modem watchdog detected modem recovery after $failurecount failures"
		fi
		failurecount=0
	fi
	sleep $period
done
