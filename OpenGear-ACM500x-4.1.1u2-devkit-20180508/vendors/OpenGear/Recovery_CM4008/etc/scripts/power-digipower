#! /bin/sh

host=$1
outlets=$2
cmd=$3
tmpfile=/tmp/tmp.$$

declare -a outletStatus
ON=".1.3.6.1.4.1.17420.1.2.9.1.21.0"
OFF=".1.3.6.1.4.1.17420.1.2.9.1.22.0"

function toggleDelay {
	outlet=$1
	oid=$2
	new=$3
	local delays
	declare -a delays

	delayStr=`snmpget -v1 -c${community} -Oqv ${host} ${oid} 2>/dev/null | tr -d "\""`
	IFS="," delays=(${delayStr})
	if [ -z "${delayStr}" ]
	then
		return
	fi
	OLD=${delays[$outlet]}
	delays[$outlet]=$new

	newVal=`echo ${delays[*]} | tr " " ","`
	snmpset -v1 -c${community} -Oqv ${host} ${oid} s "${newVal}" 2>&1 1>/dev/null
}



if [[ -z "$host" ]] || [[ -z "$outlets" ]] || [[ -z "$cmd" ]]; then
	appname=`basename $0`
	echo "Usage: $appname <port> \"<outlet> [outlet..]\" on|off|status"
	exit 1
fi

# Suppress error messages from the shell
exec 2> /dev/null

# Get current status

status_nibble=`snmpget -v1 -c${community} -Oqv ${host} .1.3.6.1.4.1.17420.1.2.9.1.13.0 | tr -d "\""`

if [ -z "$status_nibble" ]
then
	echo "Unable to retrieve status"
	exit 1
fi

IFS="," outletStatus=(${status_nibble})


if [ $outlets -gt ${#outletStatus[*]} ]
then
	echo "Invalid outlet"
	exit
fi

if [[ "$cmd" == "on" ]]; then
	echo "Powering on outlet $outlets"

	toggleDelay $(($outlets - 1)) ${ON} 0

	outletStatus[$(($outlets - 1))]=1
	newStatus=`echo ${outletStatus[*]} | tr " " ","`
	snmpset -v1 -c${community} -Oqv ${host} .1.3.6.1.4.1.17420.1.2.9.1.13.0 s "${newStatus}" 2>&1 1>/dev/null

	toggleDelay $(($outlets - 1)) ${ON} ${OLD}

elif [[ "$cmd" == "off" ]]; then
	echo "Powering off outlet $outlets"

	toggleDelay $(($outlets - 1)) ${OFF} 0

	outletStatus[$(($outlets - 1))]=0
	newStatus=`echo ${outletStatus[*]} | tr " " ","`
	snmpset -v1 -c${community} -Oqv ${host} .1.3.6.1.4.1.17420.1.2.9.1.13.0 s "${newStatus}" 2>&1 1>/dev/null

	toggleDelay $(($outlets - 1)) ${OFF} ${OLD}

elif [[ "$cmd" == "cycle" ]]; then
	echo "Powering off outlet $outlets"

	toggleDelay $(($outlets - 1)) ${OFF} 0

	outletStatus[$(($outlets - 1))]=0
	newStatus=`echo ${outletStatus[*]} | tr " " ","`
	snmpset -v1 -c${community} -Oqv ${host} .1.3.6.1.4.1.17420.1.2.9.1.13.0 s "${newStatus}" 2>&1 1>/dev/null

	toggleDelay $(($outlets - 1)) ${OFF} ${OLD}

	sleep 2

	echo "Powering on outlet $outlets"

	toggleDelay $(($outlets - 1)) ${ON} 0

	outletStatus[$(($outlets - 1))]=1
	newStatus=`echo ${outletStatus[*]} | tr " " ","`
	snmpset -v1 -c${community} -Oqv ${host} .1.3.6.1.4.1.17420.1.2.9.1.13.0 s "${newStatus}" 2>&1 1>/dev/null

	toggleDelay $(($outlets - 1)) ${ON} ${OLD}

elif [[ "$cmd" == "load" ]]; then
	LOAD=`snmpget -v1 -c${community} -Oqv ${host} .1.3.6.1.4.1.17420.1.2.9.1.11.0 | tr -d "\""`
	LOAD=$(($LOAD/10))
	echo $LOAD
	
elif [[ "$cmd" == "probe" ]]; then
	echo ${#outletStatus[*]}
else 
	echo -n "Outlet $outlets is "
	if [ "${outletStatus[$(($outlets - 1))]}" == "0" ]
	then
		echo "off"
	else
		echo "on"
	fi
fi

exit 0
