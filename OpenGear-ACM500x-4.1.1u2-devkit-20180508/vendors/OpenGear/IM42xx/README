OPENGEAR KS8695P FLASH
----------------------

These instructions document how to use the OCdemon debugger (with
ARM 20pin JTAG header) to program the flash in-circuit on KS8695P
based boards. This is specifically tailored to the OpenGear IM42xx,
but would apply equally to other similar boards.


0. SETTING UP DEBUGGER

   Using OCdemon package, setup with appropriate .gdbinit script.
   (Use uClinux-dist/tools/misc/im42xx.gdb).

   Firstly make sure you have the lp drivers loaded, and then load
   the ocdemon driver:

      modprobe lp
      modprobe -f ravenpp

   (Ignore the ravenpp load warnings).

   Now startup the process demon, and start gdb:

      OcdLibRemote -c ARM9 &
      arm-elf-gdb -nw

      OR

      ocdremote -c ARM922T &
      arm-elf-gdb -nw

   Sometimes the debugger cannot access the CPU internals. Not sure why,
   but it happens from time to time. If it happens exit gdb and then
   manually reset the CPU board (jumper reset pins for example).


1. FLASHING BOOT LOADER

   Inside gdb run the following commands:

      mem-init
      flash-init
      flash-erase 0x03000000

   We need to convert the u-boot.bin binary into a loadable gdb script.
   Run the converter program on the u-boot binary (don't do this in gdb,
   this is run from the linux command shell):

      tools/mk-gdb-uboot u-boot.bin

   This will create the file u-boot.gdb which you then need to load in gdb 
   using:

      source u-boot.gdb

   NOTE: This output the following error, ignore.

   u-boot.gdb:29858: Error in sourced command file:
   Invalid number "0x".

   Now program the boot loader into flash with:

      flash-burn

   NOTE: flash-burn relies on programs in tools/bin/ make sure you are in 
         uClinux-dist-base or add appropriate sym-links.

   NOTE: The following output may be seen.
	Loading section .text, size 0x44 lma 0xf10000
	Start address 0xf10000, load size 68
	Transfer rate: 544 bits in <1 sec, 68 bytes/write.
	Missing argument 0 in user function.

   This will return you to the prompt, and then do:

      set $r1 = 0x03000000
      set $r5 = 0
      set $r6 = 0x20000
      c

   This dosn't take long, but does not return to the prompt, you need to
   break into it (with CTRL-C) then check $r5, if it is the same as what
   you set $r6 to then you are done. Do:

      print $r5

   Sometimes (though not often) the programming cycle fails, the debug
   setup is not 100% reliable, so check that what made it into flash is good:

      x/32x 0x03000000

   It should match a hexdump of u-boot.bin.


