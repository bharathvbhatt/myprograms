
MWELAB1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000001da  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080013e  0080013e  000002ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c41  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000973  00000000  00000000  00001015  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000060f  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00001f98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bd  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000293  00000000  00000000  000025bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002850  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ed       	ldi	r30, 0xDA	; 218
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 33       	cpi	r26, 0x3E	; 62
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e3       	ldi	r26, 0x3E	; 62
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 34       	cpi	r26, 0x44	; 68
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void)
{
    /* Replace with your application code */
	uint8_t data=0;
	spi_init();
  a6:	0e 94 a0 00 	call	0x140	; 0x140 <spi_init>
    USART_Init();
  aa:	0e 94 d7 00 	call	0x1ae	; 0x1ae <USART_Init>
	DDRB |=(1<<1);
  ae:	21 9a       	sbi	0x04, 1	; 4
	PORTB &= ~(1<<1);
  b0:	29 98       	cbi	0x05, 1	; 5
    serialModeRx_init();
  b2:	0e 94 69 00 	call	0xd2	; 0xd2 <serialModeRx_init>
	serialModeWrite();
  b6:	0e 94 8d 00 	call	0x11a	; 0x11a <serialModeWrite>
    while (1) 
    {
		 serialModeWrite();
  ba:	0e 94 8d 00 	call	0x11a	; 0x11a <serialModeWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	83 ed       	ldi	r24, 0xD3	; 211
  c2:	90 e3       	ldi	r25, 0x30	; 48
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x1e>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x28>
  ce:	00 00       	nop
  d0:	f4 cf       	rjmp	.-24     	; 0xba <main+0x14>

000000d2 <serialModeRx_init>:
	
	
}

void serialModeRx_init()
{
  d2:	ef 92       	push	r14
  d4:	ff 92       	push	r15
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	c6 e1       	ldi	r28, 0x16	; 22
  e0:	d1 e0       	ldi	r29, 0x01	; 1
  e2:	0f 2e       	mov	r0, r31
  e4:	fe e3       	ldi	r31, 0x3E	; 62
  e6:	ef 2e       	mov	r14, r31
  e8:	f1 e0       	ldi	r31, 0x01	; 1
  ea:	ff 2e       	mov	r15, r31
  ec:	f0 2d       	mov	r31, r0
  ee:	0a c0       	rjmp	.+20     	; 0x104 <serialModeRx_init+0x32>
	uint8_t index_j;
	for(index_i=0;index_i<5;index_i++)
	{
		for(index_j=0;index_j<8;index_j++)
		{
			spi_readwrite(initRx_table[index_i][index_j]);
  f0:	89 91       	ld	r24, Y+
  f2:	0e 94 ad 00 	call	0x15a	; 0x15a <spi_readwrite>
{
	uint8_t index_i;
	uint8_t index_j;
	for(index_i=0;index_i<5;index_i++)
	{
		for(index_j=0;index_j<8;index_j++)
  f6:	c0 17       	cp	r28, r16
  f8:	d1 07       	cpc	r29, r17
  fa:	d1 f7       	brne	.-12     	; 0xf0 <serialModeRx_init+0x1e>
  fc:	e8 01       	movw	r28, r16

void serialModeRx_init()
{
	uint8_t index_i;
	uint8_t index_j;
	for(index_i=0;index_i<5;index_i++)
  fe:	e0 16       	cp	r14, r16
 100:	f1 06       	cpc	r15, r17
 102:	21 f0       	breq	.+8      	; 0x10c <serialModeRx_init+0x3a>
 104:	8e 01       	movw	r16, r28
 106:	08 5f       	subi	r16, 0xF8	; 248
 108:	1f 4f       	sbci	r17, 0xFF	; 255
 10a:	f2 cf       	rjmp	.-28     	; 0xf0 <serialModeRx_init+0x1e>
		for(index_j=0;index_j<8;index_j++)
		{
			spi_readwrite(initRx_table[index_i][index_j]);
		}
	}
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	ff 90       	pop	r15
 116:	ef 90       	pop	r14
 118:	08 95       	ret

0000011a <serialModeWrite>:


void serialModeWrite()
{
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ce e0       	ldi	r28, 0x0E	; 14
 124:	d1 e0       	ldi	r29, 0x01	; 1
 126:	06 e1       	ldi	r16, 0x16	; 22
 128:	11 e0       	ldi	r17, 0x01	; 1
	uint8_t val=0;
	uint8_t index_i=0;
	for(index_i=0;index_i<8;index_i++)
	{
		 spi_readwrite(mode_reg[index_i]);
 12a:	89 91       	ld	r24, Y+
 12c:	0e 94 ad 00 	call	0x15a	; 0x15a <spi_readwrite>

void serialModeWrite()
{
	uint8_t val=0;
	uint8_t index_i=0;
	for(index_i=0;index_i<8;index_i++)
 130:	c0 17       	cp	r28, r16
 132:	d1 07       	cpc	r29, r17
 134:	d1 f7       	brne	.-12     	; 0x12a <serialModeWrite+0x10>
		 spi_readwrite(mode_reg[index_i]);
		 
	}
	
   
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	08 95       	ret

00000140 <spi_init>:
 *  Remarks :
 *        
 * ******************************************************************************************************************************************************/
void spi_read(uint8_t* data)
{
	*data = SPDR;
 140:	84 b1       	in	r24, 0x04	; 4
 142:	8c 62       	ori	r24, 0x2C	; 44
 144:	84 b9       	out	0x04, r24	; 4
 146:	8c b5       	in	r24, 0x2c	; 44
 148:	80 6d       	ori	r24, 0xD0	; 208
 14a:	8c bd       	out	0x2c, r24	; 44
 14c:	8d b5       	in	r24, 0x2d	; 45
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	8d bd       	out	0x2d, r24	; 45
 152:	22 9a       	sbi	0x04, 2	; 4
 154:	21 9a       	sbi	0x04, 1	; 4
 156:	29 98       	cbi	0x05, 1	; 5
 158:	08 95       	ret

0000015a <spi_readwrite>:
 15a:	8e bd       	out	0x2e, r24	; 46
 15c:	0d b4       	in	r0, 0x2d	; 45
 15e:	07 fe       	sbrs	r0, 7
 160:	fd cf       	rjmp	.-6      	; 0x15c <spi_readwrite+0x2>
 162:	8e b5       	in	r24, 0x2e	; 46
 164:	08 95       	ret

00000166 <__vector_17>:
 *  
 *  Remarks :
 *        
 * ******************************************************************************************************************************************************/
ISR(SPI_STC_vect)
{
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
    
}
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <USART_Receive>:


unsigned char USART_Receive(FILE *stream)
{
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 17a:	e0 ec       	ldi	r30, 0xC0	; 192
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	88 23       	and	r24, r24
 182:	ec f7       	brge	.-6      	; 0x17e <USART_Receive+0x4>
	/* Get and return received data from buffer */
	return UDR0;
 184:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 188:	08 95       	ret

0000018a <USART_Transmit>:

void USART_Transmit(char data, FILE  *stream)
{
 18a:	cf 93       	push	r28
 18c:	c8 2f       	mov	r28, r24
	/* Wait for empty transmit buffer */
   if(data == '\n')
 18e:	8a 30       	cpi	r24, 0x0A	; 10
 190:	29 f4       	brne	.+10     	; 0x19c <USART_Transmit+0x12>
   {
	   USART_Transmit('\r', 0);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	8d e0       	ldi	r24, 0x0D	; 13
 198:	0e 94 c5 00 	call	0x18a	; 0x18a <USART_Transmit>
   }
	while (!(UCSR0A & (1<<UDRE0)));
 19c:	e0 ec       	ldi	r30, 0xC0	; 192
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	85 ff       	sbrs	r24, 5
 1a4:	fd cf       	rjmp	.-6      	; 0x1a0 <USART_Transmit+0x16>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 1a6:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <USART_Init>:


void USART_Init()
{
	/*Set baud rate */
	UBRR0H = ((MYUBRR)>>8);
 1ae:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L =  MYUBRR;
 1b2:	87 e6       	ldi	r24, 0x67	; 103
 1b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 1b8:	88 e1       	ldi	r24, 0x18	; 24
 1ba:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 1be:	86 e0       	ldi	r24, 0x06	; 6
 1c0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	stdin=stdout=&uartout;
 1c4:	ee e3       	ldi	r30, 0x3E	; 62
 1c6:	f1 e0       	ldi	r31, 0x01	; 1
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	93 83       	std	Z+3, r25	; 0x03
 1ce:	82 83       	std	Z+2, r24	; 0x02
 1d0:	91 83       	std	Z+1, r25	; 0x01
 1d2:	80 83       	st	Z, r24
 1d4:	08 95       	ret

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
